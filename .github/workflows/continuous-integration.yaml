name: "Continuous Integration"

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request:

env:
  PYTHON_VERSION: 3.9.13
  POETRY_VERSION: 1.2.2

jobs:
  continuous-integration:
    name: Run Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Poetry ${{ env.POETRY_VERSION }}
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Check poetry
        run: |
          poetry --version
          poetry --help

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Format code
        id: fmt
        run: |
          poetry run python -m isort --check pulsar_data_collection/
          poetry run python -m black --check pulsar_data_collection/

      - name: Lint code
        id: lint
        run: |
          poetry run python -m flake8 pulsar_data_collection/

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Format üñå\`${{ steps.fmt.outcome }}\`
            #### Linting ‚öôÔ∏è\`${{ steps.lint.outcome }}\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Build and publish
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: |
          poetry config repositories.aws_repository https://pulsar-model-performance-management-212028562834.d.codeartifact.us-east-1.amazonaws.com/pypi/pulsar-data-collection/simple/
          poetry config http-basic.aws_repository aws $(aws codeartifact get-authorization-token --domain pulsar-model-performance-management --query authorizationToken --output text --region us-east-1)

          poetry publish --build --repository aws_repository
